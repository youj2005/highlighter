Binary Arithmetic,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Signed Integers,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Can’t simply add lead bit indicating sign because 0 is unsigned and there would be -0,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,
Two’s Complement - Start with the positive number and flip the bits and add one,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,
Throw away carry out,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Overflow (number is out of range) if carries don’t match,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
e.g. 0000 -> 1111 + 0001 -> 0000,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
"Leading digit indicates sign (0 is positive, 1 is negative)","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
Can only represent  positive numbers (one more negative,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
e.g. 1000 is actually -8,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Sign Extension,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
"When adding a negative number, instead of adding leading 0s, add leading 1","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,
"Hexadecimal (0x), Binary, (0b), Octal (0)","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
Turing Equivalence,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
All computers can accomplish the same tasks,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
Abstraction,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Low level logic to higher levels,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
Binary,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Logical Operators,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
AND,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
OR,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
XOR,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
XOR ≣ (A AND ¬B) OR (¬A AND B),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
Bitwise Operations,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Logical operators applied to a string of bits bit by bit,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,
AND -> &,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
NOT -> |,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
XOR -> ^,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
NOT -> ~,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Shifts,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Leftshift (<<) - Shifts everything left by _ digits,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
Rightshift (>>) - Shifts everything right by _ digits,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
Masks - Constants you multiply a collection of bits by to do bitwise operations,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
CLEAR,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Place 0s throughout and 1s where you want to keep the value,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
Use & operator,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
e.g. abcd & 0010 = 00c0,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
SET,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Place 0s throughout and 1s where you want to set to 1,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
Use | operator,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
e.g. abcd | 0010 = ab1d,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
TOGGLE - Flips bit at certain index,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
Place 0s throughout and 1s where you want to toggle,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
Use ^ operator,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
e.g. abcd ^ 0010 = ab¬cd,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
ASCII,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Unicode and UTF-8,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Mantissa - The binary representation of the number with no decimal,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,
First convert integer portion to binary,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
Convert float portion to binary by repeatedly multiplying by two,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
e.g. ,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Take the ones digit and that is the coefficient to the corresponding power of 2,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
Concatenate and remove leading one,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
Exponent,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Essentially determines where to place the decimal place,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
"If E > 127, the float has an integer component","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
"Source - The “input” signal of a transistor, often power/ground","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
"Drain - The “output” signal of a transistor, ground","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
NMOS connected to ground and PMOS connected to source,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
3 different states,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
0 volts - Grounded or designated so which represents the logical 0,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
0-2.9 volts - Floating/High impedance state where it is neither logically 0 or 1,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,
2.9 volts - Designated as 2.9 volts which is a logical 1,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
NOT Gate,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
0 → 1,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
1 → 0,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
NOR Gate,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
0 NOR 0 → 1,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Anything else opens the p-types and closes at least one of the n-types,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,
NAND Gate,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
1 NAND 1 → 0,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Anything else opens the n-types and closes at least one of the p-types,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,
AND & OR Gates,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Simply add a not gate to the NAND and NOR gates,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,
"Tri State Buffer - Allows data to only passed through if gate is true, floats if not ","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,
Combinational Logic - Logic that produces the same output for the same input,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
A AND B → AB,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
A OR B → A + B,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,
NOT A → A‘,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
A XOR B,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
DeMorgan’s Law,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Conte Bubble Theorem,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
"By converting gates, we can use less transistors","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
Decoder () - A switch that converts coded inputs into coded outputs with a one to one relation,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,
"Mutiplexor - A switch, using selecting bits, to select a single signal from an array of signals to an output","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,
"Basic multiplexor: 1 output, n control lines, 2n inputs","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
Full Adder,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
"If output signal of AND gate is not connected to one of the two outputs, it defaults to 0","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,
OR gate so any of them toggles them,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
Subtractor,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Simply NOT whatever your subtracting by and set the first carry in to 1,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
Karnaugh Map,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Each adjacent cell must only differ by one bit (Gray’s code),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,
Look at rectangles and look at which variales change,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
Factor out everything else and simplify,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
e.g. RED: ,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Sequential Logic - Stores elements so that output depends on input and state,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
R/S Latch,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Gated D Latch,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
An R/S Latch that prevents invalid inputs (hence the notch which guarantees opposite inputs),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,
WE represents writability,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Address Space - Number of addresses available,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
Addressability - Size of each memory location,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
Memory (address space x addressability) - Rows (address space) and columns (addressability) of Gated D Latches that stores bits,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,
Decoders help decide which row we choose to write to,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
Multiplexers determine which row we take an output from by anding the row value with the output (if row = 0 then that is never getting outputted),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]"
Clock,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Alternates signal,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Level-Triggered - A device that triggers depending on the state,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
e.g. Gated D Latch or R/S Latch,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
Edge-Triggered - A device that triggers due to the switching of a state,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
Leader-Follower/Flip Flop,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
"Using the clock, allows data written to leader to be written to follower on edges","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
Register - A grid of leader/follower d-latches that stores concurrent operations,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,
Stores data once every cycle,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Finite State Machine - A machine that takes in current state and inputs to alter next state,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,
Moore Machine - A machine that only depends on current outputs,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,
Mealy Machine - A machine that depends on current outputs and inputs,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,
Von Neuman Model,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Bus (16),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Wire that delivers data to all comoponents,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
Only one instruction,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Finite State Machine,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Controls all the signals (everything not connected to a wire),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
"Combinational logic produces outputs (signals), next state (J), and COND & IRD, which control (J)","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
"COND (3) - Depending on the value, sets the corresponding bit in J to 1","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
IR (1) - Passes through previous state regardles,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
General Purpose Register (GPR) (),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
"Holds 8 addresses (R0-R7), each 16 bits","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
Destination Register (DR) - Specifies which register to save to,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
Source Register (SR) - Two output registers,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
SR1 and SR2 for operations with two numbers in ALU,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
Program Counter (PC) (16 bits),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Register that holds address of next instruction,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
Three Updates,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Set to certain value by bus,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
PC ++,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Add offset to PC value,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
Instruction Register (IR) (16 bits),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Holds value of the current instruction,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
Arithmetic Logic Unit (ALU),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Inputs: Data from register or immediate value from instruction,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
SR2MUX - Passes through immediate value or SR2,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
ALUK - Operation selector,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
00: A + B,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
01: A & B,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
10: NOT A,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
11: PASS A,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Memory (),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
MEM.EN - controls access to memory,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
R.W - Controls read/write (0/1),"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
MDR - Takes in data to write and outputs data stored at memory location,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
MAR - Gives memory location to read/write,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
Condition Code Register,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
"Stores whether or not the last evaluation was negative, neither, or positive","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,
Operations go through all three macrostates to properly execute,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
Fetch (3 clock cycles),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
1st cycle: Takes incremented PC and puts it in MAR.,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
2nd cycle: Put data into MDR,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
3rd cycle: Take data from MDR (through bus) and store in IR,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,
Decode (1 clock cycle),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Takes in instruction from IR and uses opcode to determine operation ,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,
Execute (variable clock cycle),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Executes instruction through signals,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
The four most significant bits in an instruction that indicates what operation to execute,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
Arithmetic (AND & ADD),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
5th bit determines SR2MUX,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Register - Pulls from register,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
Immediate - Pulls from output,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
Load (memory→register),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
PC Relative (LD) - mem[PC* + PCOffset9],"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,
PC* is iterated PC,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
Only +- 256 from PC,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Indirect (LDI) - mem[mem[PC* + PCOffset9]],"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
Base + Offset (LDR) - mem[BaseReg + offset6],"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,
Anywhere,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Store (register→memory),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Same as LD except opposite direction,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
Control,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Branch (BR) - Branches to a different memory location for PC depending on NZP value,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
"If one of the values are both true, then execute","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
PC* + PCoffset9 → PC,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
Jump - Always jumps to different memory location for PC,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
"Uses opcode instructions as text (e.g. ADD R1, R3, #1)","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,
"#, x, b - Decimal, hexcode, and binary","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
 - Essentially variable storing memory location,"[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
Leftmost (everything else is indented if no label),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
; - Comments,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
HALT - Stops program,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Assembly Directives - Non instructional commands that come after HALT (except .orig),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,
.orig  - Starts code at address,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
.end-End of memory locations,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
.blkw - Blocks out addresses at ,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
.fill - Fills in memory location with  at ,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
.stringz - Blocks out  addresses,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Add NULL (0) to end,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Two-Pass Assembly,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
1st Pass: Generate symbol table and end at .end by entering label and location counter into table,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,
2nd Pass: Execute code and lookup in symbol table,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
OR,"[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
CLR,"[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
"AND R1, R1, #0","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
MOV (R1 = R2),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
"ADD R1, R2, #0","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
"Loops, Ifs","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,,
BRx,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Branch further (If),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Branch before (while),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
NOP - No operation (Branch/jump to when finished with conditional),"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
Synchronous - Data transferred at fixed rate (read/write every x cycles),"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,
Asynchronous - Data transferred on signal,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
Polling - Processor repeatedly checks if data is ready to transfer,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,
Interrupt - Device interrupts processor to transfer,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
Input,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
KBDR (Keyboard Data Register) - Last eight bits  of register that contains ASCII character,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
0xFE02 in memory,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
"KBSR (Keyboard Status Register) - Bit 15  of register that sets when new data can be read (0 → false, 1 → true)","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,
0xFE00 in memory,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Assembly code,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
"Keep loading KBSR and when it becomes negative (15 bit turns 1), load KBDR","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
Output,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
DDR (Display Data Register) - Last eight bits  of register that contains ASCII character,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
0xFE06 in memory,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
"DSR (Display Status Register) - Bit 15  of register that sets when new data can be displayed (0 → false, 1 → true)","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,
0xFE04 in memory,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Assembly code,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
"Keep loading DSR and when it becomes negative (15 bit turns 1), write into DDR","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
"PSR (Processor Status Register) - Stores information about privilege, priority, and current condition codes","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
Privilege ,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Supervisor Mode (0) - Mode that operating system executes in (access to everything),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
User Mode (1) - Mode that user operates in (cannot access I/O space or system space),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,
Priority ,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
PL0-PL7 determines order of execution,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
Higher number is higher priority,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
HALT (x25) - Stops LC-3 from running,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
OUT (x21) - Print R0 character to console,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
"PUTS (x22) - Prints string with address starting at R0, ending at null","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
GETC (x20) - Takes character input and puts in R0,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
Compares priority to current program priority,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
Essentially methods,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
JSR  - Jumps to label subroutine and stores address after current to R7,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
RET - Jumps to R7 address after finishing subroutine,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
The Stack - A stack that holds local variables beyond the registers,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
R6 - Stack pointer,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
R5 - Frame pointer,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
When calling a subroutine ,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Caller,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Caller Buildup,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Push arguments into stack in reverse order (use R6),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
Jump to subroutine,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Caller Teardown,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Load return value and pop (from R6),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
Pop arguments (from R6),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Callee,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Callee Buildup,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
"Reserve space for return value, and store R7 and R5","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
Set R5 to R6 incremented,"[0.0, 0.0, 0.0, 1.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
Reserve space for local variables and store old registers (from R6),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
Callee Teardown,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Store return value (from R5),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
Restore register values and pop local variables (from R6),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
Pop and restore R5 and R7 (from R6),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
Syntactically similar to Java,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
Booleans - Integers (0 for false & non-zero for true),"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
String,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
"char str[] = ""String"";","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
"char *str = ""String"";","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
The preprocessor performs text-level substitution,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Macro - Replaces appearances of certain code,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
#define var other_var,"[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
"#define FUNC(A, B) (A & B)","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
File Inclusion,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
"#include ""myfile.h""","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
"#include ""clibraryfile.h""","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Source Code Analysis - Breaks code into parts (e.g. functions),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
Target Code Analysis - Compiles parts into machine code,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
"Symbol Table - Table holding references to variables, functions, etc.","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
"Outputs object file which is linked to header file, outputing executable file","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
* - Indicates pointer (referencing w/ declaration) or value at address (dereferencing w/ assigning),"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,
*func(return type) - function pointer,"[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
& - Indicates memory location of,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
e.g. int *addr = &i;,"[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
e.g. int value = *addr;,"[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Automatically multiplies offset by size when adding,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
Points to directly after current data,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
type arr[len],"[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
type var = arr[2],"[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
type var = *(arr + 2),"[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
Array declaration creates a pointer,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Definition,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
struct name {type key; type key;},"[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
Initialization,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
struct name var;,"[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
struct name *pointer;,"[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
type val = pointer -> key;,"[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
Replace type with an identifier,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
typedef unsigned char BYTE;,"[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
static,"[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Makes functions/global variables only accessible within file (like private),"[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
Makes local variables exist across functions (like static),"[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
Stored in global data section,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
const - Unchanging variable,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
extern - Defined outside of the current file,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
Pixels,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
160x240 (HxW),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Video Buffer - 1D array of pixels where every WIDTH pixels is a new column (which is stacked on top of each other),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,
"videoBuffer(row, col) = videobuffer[row * WIDTH + col]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
Draw Cycle,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
VDraw - Drawing frame line by line from top,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
May cause screen tearing,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
VBlank - Does not draw certain number of lines,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
External hardware device that takes control from CPU to update graphics,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,
Copies over from specific memory addresses into its own register,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
DMA Controller - Controls what to send to DMA,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
4 Channels/Registers,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
"1 - Source, 2 - Destination, 3 - Control","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
DMA Command,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
On/off (EN),"[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Number of elements to copy (N),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
Increment/decrement/neither source (SA),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Increment/decrement/neither destination (DA),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Dynamic Memory - Memory allocated during runtime to adjust for needs,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,
malloc(size)- Allocates block of memory on heap of size and returns a void pointer,"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
e.g. int* pointer = (int*) malloc(5*sizeof(int));,"[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
returns NULL if heap has no more space,"[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
free(pointer) - Frees up memory at pointer (including everything within size),"[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
"realloc(pointer, size) - Changes the size of the allocated memory at pointer","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
returns void pointer,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Keeps data the same,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
"If size is larger, everything past previous size is indeterminate","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
"calloc(num, size)- Allocates (num*size) memory and initializes each value to 0","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,
returns void pointer,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
"When referencing pointers in functions, due to teardowns in the stack, data may be lost","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,
Allocate space on heap and return a pointer to the heap to preserve data,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
Amortized Efficiency,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Considers average Big-O instead of simply worst-case scenario,"[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
Array - A contiguous sequenced collection of items (with indexes) of fixed length (capacity),"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,
Stores primitives or objects,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Statically allocated (fixed memory spots),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Declaration,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
[]  = new [];,"[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
"[]  = {, … };","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
Arrays can store references to objects,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
Accessing O(1),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Memory storage is contiguous (adjacent memory positions),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
First index memory location is known,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
Data type is predetermined,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
new_address = start_address + i * data_size,"[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
Searching O(N),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Linear search for unsorted array,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
ArrayList - A contiguous sequenced collection of items of variable length,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,
Must be zero-aligned,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
First item must be in first memory location,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
Adding,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
At index O(N),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Must shift items afterwards backwards by one,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
At end O(1) (amortized),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
Because no shifting,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Non-amortized: O(N) because of resizing,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Remove,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
At index O(N),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Must shift items afterwards forward by one,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
At end O(1),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
No shifting,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
"Linked List (LL) - A collection of nodes, each of which only connects to one other node (next), starting at the head","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,
Doubly Linked Lists (DLL) - A LinkedList with pointer to the next  nodes,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
Singly Linked Lists (SLL) - A typical LinkedList with only the next pointer,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
Circularly Linked Lists (CLL) - A LinkedList where the head and the “tail” are the same,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,
End-condition is now when current == head,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]","[0.0, 1.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
Not necessarily contiguous,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Check if head is null,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Can contain tail pointer,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Node - Stores data and a reference to the next node,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,
Adding,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
At index O(N),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
At front O(1),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Must reset head,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
At end O(N),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Must stop two nodes ahead,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Unless if end pointer exists (O(1)),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
Removing,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
At index O(N),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
At front O(1),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
At end O(N),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Must check next next node,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Edge Cases,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Adding to back of empty SLL (create new node as header),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,
Removing back of SLL with size 1 (head = null),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
Iterable/Iterator,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Easily implements iterator by calling next for next(),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
Stack - A data structure to remove the most recently added object (Last in First Out (LIFO)),"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,
Example behaviors,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Undo/redo,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Browser forward/backward,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Recursive method (call stack),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Push - Adding to the top of the stack,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
Pop - Removing from the top of the stack,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
Peek - Looks at top object without removing,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
Implementations,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Linked Stack - Singly LinkedList with the head being the most recent element,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
Array Stack - ArrayList starting at the end with most recent element as the last element,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,
Queue - A data structure to remove the oldest object (First in First Out (FIFO)),"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,
Example Behaviors,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Song queue,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Waitlist,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Enqueue - Adds to end of the queue,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
Dequeue - Removes the oldest in the queue (front),"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
Peek - Returns front of queue without removing,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
Implementation,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Linked Queue - Singly LinkedList where head is the front of the queue,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
Enqueue → Add to tail,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Dequeue → Remove head,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Array Queue - Array with front and back indexes to keep track,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,
Not ArrayList because both add and remove at beginning is O(N),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,
Front and back both start at start of array,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
Back wraps around to front when back reaches the end,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
Dequeue → increment first,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Enqueue → increment last,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Priority Queue - A data structure where the element with highest priority is removed,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
Data must be comparable,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Deque - A double-ended queue with add/remove from front/back,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
Implementation,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Array Deque,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Same methods as Array Queue with addLast and removeFirst,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
Same wrap-around behavior,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
addFirst → decrement first,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
removeLast → decrement last,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Linked Deque - Doubly LinkedList,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
Same methods as Linked Queue,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
addFirst → New head,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
removeLast → Doubly linked list so remove tail (O(N)),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
Tree - A linked hierarchical structure,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
Depth - Distance from the node to the root,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
Height - Distance from the node to the deepest sub-node,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
No cycles,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Depth First Search (DFS) - Starts at root and traverses by going for deepest node,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
Preorder Traversal - Check current data first then recursively traverses through left child then right,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
Records top levels first,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Postorder Traversal - Check current data after recursively traversing through left child then right,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
Records bottom levels first,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Inorder Traversal - Check current data between recursively traversing through left child and right,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
Reads data in order,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Not unique representation unlike pre and post,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
Breadth First Search (BFS) - Starts at root and traverses by searching across each depth,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
"Levelorder Traversal - Add to a queue the root and then start looking at nodes from the front of the queue, enqueue their children, and then dequeue","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]"
Binary Tree - A tree where each node has only two children (left then right),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,
Balanced - If each kids heights differ by at most 1,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,
Ability to recursively traverse by going to children,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
Binary Tree shapes,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Binary Search Tree - A tree where the left child is less than the node and the right is greater,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,
Binary Search O(logn),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Implements a form of binary search but recursive,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
Depending on whether or not search number is larger/smaller than current node,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
Go to corresponding child,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
True/False,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Degenerate trees have O(n) ,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
"Pointer Reinforcement - When recursively calling methods, set left/right to whatever the previous returns (always returns current node at end)","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,
Add,"[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Create new node if current is add,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
Remove,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
"Use dummy node to store removed data, which at each step is the current data","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,
Zero-Child Case,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Return/set null,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
One-Child Case,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Return/set left/right child,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Two-Child Case,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Change current node to have the data of successor/predecessor,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
Successor - Least number greater than current node (leftmost leaf in right child),"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
Predecessor - Largest number less than current node (rightmost leaf in left child0,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
Run helper method to get data of successor/predecessor,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
Helper is also pointer reinforced by returning the child of the succ/pred,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
Use dummy node to pass through helper and use the data from that (succ/pred) to change current data,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,
Heap - A complete binary tree where each parent has a higher priority than its children,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,
MaxHeap - A heap where parent > kids,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
MinHeap - A heap where parent < kids,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
"ArrayHeap - Level order array, starting at index 1","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
For node at i,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
Left child: 2i,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Right child: 2i+1,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Parent: i/2,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Heapify - Ensuring heap structure of complete heap represented by array by repeatedly swapping a node and its parent to maintain its relationship,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,
Add O(logn),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Add data to end of array to ensure completeness,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
Up-Heap - Heapifying from bottom to top,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
Remove O(logn),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Remove data at beginning of array (root),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
Copy last data to root,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Down-Heap - Heapifying from top to bottom by finding highest priority child to swap with,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
Build Heap O(n),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
"Call down-heap on each sub-heap, starting at index size/2 (parent of rightmost leaf)","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
Climb upwards by one index and call down-heap on farther up sub-heaps containing other subheaps,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
"Maps - Collections that are key-value paired, searchable, and unordered","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
Keys are unique,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Put - Adds key and value to map,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
Hash-Map - A map where the key is hashed to represent its array index,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
Hashing - Converting object to integer where:,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
"If two objects are equal, their hashcode is also equal","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
Not necessarily vice versa,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
Designed to avoid collisions,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
Collisions - When two values will be assigned the same key,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,
Collision Avoidance,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Resize,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Re-assign key-value locations,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Maximum Load Factor - Determines when you resize,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
Typical Max Load Factor = 3/5,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
Closed Addressing - Multiple values per key,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
External Chaining - Having a BST at each index,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
No duplicate keys,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Open Addressing - One value per key,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
Soft Remove - When removing put in DEL marker,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
Do not include on resize,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
General Probing,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
"When getting, probe to see when next occurrence is","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
Stop when hitting null/del,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
"When putting, in priority order, put in desired spot, replace existing, in del marker, or null","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,
Linear Probing - Upon collision look for empty slot by incrementing index,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,
"Primary Clustering/Turtling - Continuous blocks of data, which causes inefficiencies","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
Stop on reaching n-blocks,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Quadratic Probing - Upon collision look for empty slot by incrementing by natural numbers squared,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
Secondary Clustering - Different keys collide in quadratic steps,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
"To avoid infinite probing, resize upon probing n-times","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,
SkipList - A sorted LinkedList where each node has a pointer that points to nodes ahead and to itself on another layer,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,
Starts with - and ends with ,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
Contains O(logn),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
"See if data is less than farthest node, if yes then jump down to look at closer nodes","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,
"If not, jump to that node and repeat","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
Add O(logn),"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Find add spot through contains,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,
Add to bottom and add levels depending on number of heads flipped,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
AVL - A binary tree that is forced to be balanced,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,
Balance Factor - The height of left node - height of right node,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
"Node is unbalanced if balance factor is not -1,0,1","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
Single (Left/Right) Rotation - Make one of the child nodes parents of unbalanced node,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
Have current node’s empty pointer adopt child of rotated child,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,
Multiples rotations may be needed if left rotation and the swapped node is left-heavy and vice versa,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,
Rotate subtree first,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
2-4 Tree - A tree where a node can have 1-3 data points in sorted order,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,
Number of children must be data + 1,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
Data must be sorted in ascending order counting the children,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
All leaves must have same depth,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
Guarantees O(logn) for all,"[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
Add,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Always add to end of leaf,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
"When overflowing, promote second/third data point to parent then split into two nodes","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,
"If parent overflows, also split parent","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,
Remove,"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Case 1: Remove from leaf with multiple data,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
Case 2: Remove in middle of tree,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
Use predecessor/successor method (look rightmost/leftmost in node),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
Case 3: Remove from leaf with one data,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
Pull down from parent and push one from neighboring leaf to parent,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,
Case 4: Remove from leaf with one data (other leaves only have one data),"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
Fusion - Pull down from parent data and merge with neighbor,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,
Fusion can propagate upwards ,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Adaptive - Runs faster if data is partially sorted,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
Stable - Elements of equal value keep their order before/after,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
Can run multiple sorts,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
In-Place - Uses less than O(n) additional memory,"[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
Bubble Sort - Iterate through data and swap pairs if out of order and repeat till sorted,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,
"After first iteration, largest is always last, etc.","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
"After each iteration, stop before completely sorted segment ","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
", , ","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Worst case when reverse sorted,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
"Adaptive, Stable, In-place","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Insertion Sort - Iterate through data and place current data in previously sorted segment,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
Stability: insert duplicate afterwards,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
", , ","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Worst case when reverse sorted,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
"Adaptive, Stable, In-place","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Selection Sort - Iterate through data and place current max at end of non-sorted segment,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,
", , ","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Worst case when reverse sorted,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
In-place,"[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
"CocktailShaker Sort - Run Bubble Sort from both ends, swapping at the same time","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,
Merge Sort - Break down array into arrays of length 1 then recursively combine them while keeping them sorted,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,
", , ","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Stable,"[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
"QuickSort - Given a pivot, place an element to the right/left of the pivot then recursively call on subarray","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,
Move pivot to the and create front and end pointer (left and right),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,
Swap so that left side is less than right (increment/decrement depending on swap),"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,
In-Place,"[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Radix Sort - Create buckets (queues) for current digit and place numbers in it to sort by that digit (least significant first) then dump them in order,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]"
", , ","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Stable,"[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
"Starting at start of both strings, increment through both to check if they have same character","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,
"If not, move pattern up one","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
O(mn),"[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,,
Last Occurrence Table,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,
Create HashMap containing each letter as a key and the index of last occurrence as value,"[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,
Search Algorithm,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Align starts and start from back of pattern to check,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
3 cases when conflict,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Not in table,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Move string all the way past current end index,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
Last occurrence of text character not encountered yet,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,
Shift to match the index of the two characters,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,
Last occurrence of text character encountered,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
Shift by one,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
"When conflict, restart from back of pattern","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,
Failure Table,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Generate array of integers of length of pattern,"[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,
Value at index is the length of substring that is a proper prefix as well as a proper suffix ,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,
Search Algorithm,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Align starts and start from start of pattern to check,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,
2 cases when conflict,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,
Start of pattern,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Shift pattern forward one,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,
Middle of pattern,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,,,
Shift pattern to end of previous prefix defined in the failure table so that the start is aligned,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,
"When finding occurrence, jump over match","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
String Hashing,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Rolling/Updating Hash,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Search Algorithm,"[0.0, 0.0, 1.0, 0.0]","[0.0, 0.0, 1.0, 0.0]",,,,,,,,,,,,,,,,,,,,,,,,,
Iterate through string and compare hashes,"[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
"If same hash, then compare string","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,
"Else, update hash and iterate","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]","[0.0, 0.0, 0.0, 1.0]",,,,,,,,,,,,,,,,,,,,,,
Big O is because of hash collisions,"[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]","[1.0, 0.0, 0.0, 0.0]",,,,,,,,,,,,,,,,,,,,
